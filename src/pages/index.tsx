import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { Container, Header, Button, Group, Title, Center, createStyles, Text } from "@mantine/core";
import { trpc } from "../utils/trpc";
import { IconFilePlus, IconLogin } from "@tabler/icons";
import Logo from "./logo";


const useStyles = createStyles((theme) => ({
  header: {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
  },

  createHintButton: {
    display: "flex",
    justifyContent: "center",
    flexDirection: "column",
  }
}));

const Home: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
  const { classes, cx } = useStyles();

  return (
    <>
      <Head>
        <title>Hint Hub</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header height="60" mb={120}>
          <Container py={20} className={classes.header}>
            <Logo />
            <LoginButton />
          </Container>
        </Header>

        <Container size="sm" className={classes.createHintButton}>
          <Title order={1} weight="black" size="72px" align="center">Virtual Sticky Notes for Power Users</Title>
          <Text fz="md" color="dimmed" align="center" m="md">Hint Hub allows you to quickly create and search small notes, or “hints”, on things that may be hard to remember, like keyboard shortcuts, math formulas, or a common process to follow.</Text>
          <Button size="md" color="indigo.8" style={{ alignSelf: "center" }} leftIcon={<IconFilePlus size={18} />}>Ceate Hint</Button>
        </Container>


      </main>
    </>
  );
};

export default Home;

const LoginButton: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <Button
      // className={styles.loginButton}
      leftIcon={<IconLogin size={14} />}
      color="indigo.8"
      onClick={sessionData ? () => signOut() : () => signIn()}
    >
      {sessionData ? "Sign out" : "Sign in"}
    </Button>
  );
};
